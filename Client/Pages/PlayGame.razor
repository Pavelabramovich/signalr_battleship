@page "/play"

@inject NavigationManager NavigationManager
@inject IGameService GameService
@inject IJSRuntime JSRuntime

@implements IDisposable


<PageTitle>Play game</PageTitle>

<link href="css/style.css" rel="stylesheet">

<div class="wrap">
	<div class="battlefield">
		<div class="flex outer">
			<div class="field my-field">
				<div id="my_field" class="ships" style="pointer-events: none;">
					@((MarkupString) content)
					@foreach (var iconHtml in getIconHtmlList)
					{
						@iconHtml
					}
				</div>
			</div>
			<div class="field other-field">
				@if (move)
				{
					<div id="other_field" class="ships" @onclick="(e => Click(e))">
						@foreach (var iconHtml in iconHtmlList)
						{
							@iconHtml
						}
					</div>
				}
				else
				{
					<div id="other_field" class="ships" style="pointer-events: none;" >
						@foreach (var iconHtml in iconHtmlList)
						{
							@iconHtml
						}
					</div>
				}
				<p id="results" hidden></p>
			</div>		
		</div>
	</div>
</div>

@code
{
	[SupplyParameterFromQuery]
	[Parameter] 
	public string GameId { get; set; } = "";

	[SupplyParameterFromQuery]
	[Parameter]
	public string Username { get; set; } = "";

	private string matrix = "";
	private string content = "";
	private bool move = false;

	private List<MarkupString> iconHtmlList = new List<MarkupString>();
	private List<MarkupString> getIconHtmlList = new List<MarkupString>();

	private IDisposable? _change;
	private IDisposable? _finish;
	private IDisposable? _getMove;

	protected async override Task OnInitializedAsync()
	{
		//var uri = new Uri(NavigationManager.Uri);
		//var query = QueryHelpers.ParseQuery(uri.Query);

		// if (query.TryGetValue("GameId", out var gameId))
		// {
		// 	GameId = gameId!;
		// }
		// if (query.TryGetValue("Username", out var username))
		// {
		// 	Username = username!;
		// }

		content = await GameService.GetContent(Username!);
		move = (await GameService.GetMove(GameId!)) == Username;

		Console.WriteLine(content);
		Console.WriteLine(move);

		_getMove = GameService.CreateConnection("GetMove", async (x, y, shot) =>
		{
			Console.WriteLine("shot " + shot);
			if (shot)
			{
				var iconHtml = await JSRuntime.InvokeAsync<string>("getshot", x, y);
				Console.WriteLine(iconHtml);
				getIconHtmlList.Add(new MarkupString(iconHtml));
				StateHasChanged();
			}
			else
			{
				var iconHtml = await JSRuntime.InvokeAsync<string>("getmiss", x, y);
				Console.WriteLine(iconHtml);
				getIconHtmlList.Add(new MarkupString(iconHtml));
				StateHasChanged();
			}
		});
		_change = GameService.CreateConnection("Change", () =>
		{
			move = !move;
			StateHasChanged();
		});
		_finish = GameService.CreateConnection("Finish", (username) =>
		{
			NavigationManager.NavigateTo($"/results?GameId={GameId}&Username={username}");
			StateHasChanged();
		});

		await GameService.ConnectToHub();

		//Console.WriteLine($"GameId = {GameId}, UserName = {Username} in playGame");
		matrix = await GameService.GetOpponentField(GameId, Username);
		Console.WriteLine($"{matrix} in playGame");

		await JSRuntime.InvokeVoidAsync("GameInit", matrix);
		StateHasChanged();
	}

	private async Task Click(MouseEventArgs e)
	{
		string iconHtml = await JSRuntime.InvokeAsync<string>("onOtherField", e);

		Console.WriteLine(iconHtml + " icon html");

		iconHtmlList.Add(new MarkupString(iconHtml));
		StateHasChanged();

		string innerText = await JSRuntime.InvokeAsync<string>("getResults");

		if (innerText == "Victory")
		{
			await GameService.EndGame(GameId, Username);
			StateHasChanged();
			return;
		}

		Console.WriteLine(innerText + " inner text");

		string[] parts = innerText.Split(' ');

		try
		{
			int.TryParse(parts[0], out int x);
			int.TryParse(parts[1], out int y);
			bool.TryParse(parts[2], out bool shot);

			await GameService.Move(GameId, Username, x, y, shot);
			StateHasChanged();
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}

	public void Dispose()
	{
		_change?.Dispose();
		_finish?.Dispose();
		_getMove?.Dispose();
	}
}

